"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã
"""
import os
import sys
import django
from datetime import date, time, timedelta
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
sys.path.append('z:/–û–±—É—á–µ–Ω–∏–µ/Top. Python/Diploma')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'autoservice.settings')
django.setup()

from django.core.exceptions import ValidationError
from django.utils import timezone
from core.models import WorkSchedule
from core.forms import WorkScheduleForm
from core.views import validate_schedule_business_logic
from users.models import User

class ScheduleValidationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self):
        self.test_results = []
        self.passed = 0
        self.failed = 0
        
    def log_test(self, test_name, passed, message="", error_details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ" if passed else "‚ùå"
        self.test_results.append({
            'name': test_name,
            'passed': passed,
            'message': message,
            'error_details': error_details
        })
        if passed:
            self.passed += 1
        else:
            self.failed += 1
        print(f"{status} {test_name}: {message}")
        if error_details and not passed:
            print(f"   üìù –î–µ—Ç–∞–ª–∏: {error_details}")
    
    def test_form_validation(self, master):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º"""
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º")
        print("-" * 40)
        
        # –¢–µ—Å—Ç 1: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞
        schedule_data = {
            'master': master.id,
            'schedule_type': 'weekly',
            'start_date': date.today() + timedelta(days=7),
            'end_date': date.today() + timedelta(days=3),
            'start_time': time(9, 0),
            'end_time': time(18, 0),
            'is_active': True
        }
        
        form = WorkScheduleForm(schedule_data, autoservice=master.autoservice)
        should_fail = not form.is_valid()
        self.log_test(
            "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞",
            should_fail,
            "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ" if should_fail else "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ",
            str(form.errors) if not form.is_valid() else ""
        )
        
        # –¢–µ—Å—Ç 2: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
        schedule_data = {
            'master': master.id,
            'schedule_type': 'weekly',
            'start_date': date.today() + timedelta(days=1),
            'end_date': date.today() + timedelta(days=30),
            'start_time': time(6, 0),
            'end_time': time(23, 0),  # 17 —á–∞—Å–æ–≤
            'is_active': True
        }
        
        form = WorkScheduleForm(schedule_data, autoservice=master.autoservice)
        should_fail = not form.is_valid()
        self.log_test(
            "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (17 —á–∞—Å–æ–≤)",
            should_fail,
            "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ" if should_fail else "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ",
            str(form.errors) if not form.is_valid() else ""
        )
        
        # –¢–µ—Å—Ç 3: –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º
        schedule_data = {
            'master': master.id,
            'schedule_type': 'weekly',
            'start_date': date.today() - timedelta(days=5),
            'end_date': date.today() + timedelta(days=30),
            'start_time': time(9, 0),
            'end_time': time(18, 0),
            'is_active': True
        }
        
        form = WorkScheduleForm(schedule_data, autoservice=master.autoservice)
        should_fail = not form.is_valid()
        self.log_test(
            "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ –ø—Ä–æ—à–ª–æ–º",
            should_fail,
            "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ" if should_fail else "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ",
            str(form.errors) if not form.is_valid() else ""
        )
    
    def test_business_logic(self, master):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏"""
        print("\nüíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
        test_schedule = WorkSchedule(
            master=master,
            schedule_type='custom',
            start_date=date.today() + timedelta(days=1),
            end_date=date.today() + timedelta(days=30),
            start_time=time(9, 0),
            end_time=time(18, 0),
            custom_days='1,2,3,4,5,6,7',  # 7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é
            is_active=True
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—É—Ç–æ–º–ª–µ–Ω–∏–∏
        errors = validate_schedule_business_logic(test_schedule)
        has_warning = any('6 –∏–ª–∏ –±–æ–ª–µ–µ –¥–Ω–µ–π' in error for error in errors)
        
        self.log_test(
            "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—É—Ç–æ–º–ª–µ–Ω–∏–∏ (7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é)",
            has_warning,
            "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ" if has_warning else "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –≤—ã–¥–∞–Ω–æ",
            f"–û—à–∏–±–∫–∏: {errors}" if errors else "–û—à–∏–±–æ–∫ –Ω–µ—Ç"
        )
    
    def test_model_validation(self, master):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
        print("\nüèó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏")
        print("-" * 40)
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥–µ–ª–∏
        schedule = WorkSchedule(
            master=master,
            schedule_type='weekly',
            start_date=date.today() + timedelta(days=1),
            end_date=date.today() + timedelta(days=30),
            start_time=time(18, 0),  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            end_time=time(9, 0),
            is_active=True
        )
        
        try:
            schedule.full_clean()
            self.log_test(
                "–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)",
                False,
                "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é"
            )
        except ValidationError as e:
            self.log_test(
                "–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)",
                True,
                "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –º–æ–¥–µ–ª–∏",
                str(e)
            )
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò")
        print("=" * 60)
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        master = User.objects.filter(role='master').first()
        if not master:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        print(f"üë®‚Äçüîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Ç–µ—Ä–∞: {master.get_full_name() or master.username}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        self.test_form_validation(master)
        self.test_business_logic(master)
        self.test_model_validation(master)
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        self.print_summary()
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.passed / (self.passed + self.failed) * 100):.1f}%")
        
        if self.failed > 0:
            print("\nüîç –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:")
            for result in self.test_results:
                if not result['passed']:
                    print(f"   ‚Ä¢ {result['name']}: {result['message']}")
        
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--quick', action='store_true', help='–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    args = parser.parse_args()
    
    tester = ScheduleValidationTester()
    
    if args.quick:
        print("‚ö° –†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    
    tester.run_all_tests()


if __name__ == "__main__":
    main()
