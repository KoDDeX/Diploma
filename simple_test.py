"""
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""
import os
import sys
import django
from datetime import date, time, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('z:/–û–±—É—á–µ–Ω–∏–µ/Top. Python/Diploma')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'autoservice.settings')
django.setup()

from core.forms import WorkScheduleForm
from users.models import User

def test_specific_case():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ù–∞–π–¥–µ–º –º–∞—Å—Ç–µ—Ä–∞
    master = User.objects.filter(role='master').first()
    if not master:
        print("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä: {master.get_full_name() or master.username}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –í–ê–õ–ò–î–ù–´–ô –≥—Ä–∞—Ñ–∏–∫
    schedule_data = {
        'master': master.id,
        'schedule_type': 'custom',
        'start_date': date.today() + timedelta(days=30),  # –ë—É–¥—É—â–∞—è –¥–∞—Ç–∞
        'end_date': date.today() + timedelta(days=60),    # –ß–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞
        'start_time': time(10, 0),   # 10:00
        'end_time': time(16, 0),     # 16:00 (6 —á–∞—Å–æ–≤)
        'custom_days': '1,3,5',      # –ü–Ω, –°—Ä, –ü—Ç
        'is_active': True
    }
    
    print("\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –ü–µ—Ä–∏–æ–¥: {schedule_data['start_date']} - {schedule_data['end_date']}")
    print(f"   –í—Ä–µ–º—è: {schedule_data['start_time']} - {schedule_data['end_time']}")
    print(f"   –î–Ω–∏: {schedule_data['custom_days']} (–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –°—Ä–µ–¥–∞, –ü—è—Ç–Ω–∏—Ü–∞)")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É
    form = WorkScheduleForm(schedule_data, autoservice=master.autoservice)
    
    print("\nüß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    if form.is_valid():
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –í–ê–õ–ò–î–ï–ù!")
        print("   –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –ì—Ä–∞—Ñ–∏–∫ –ù–ï –≤–∞–ª–∏–¥–µ–Ω!")
        print("   –û—à–∏–±–∫–∏:")
        for field, errors in form.errors.items():
            print(f"   ‚Ä¢ {field}: {', '.join(errors)}")
    
    return form.is_valid()

if __name__ == "__main__":
    test_specific_case()
